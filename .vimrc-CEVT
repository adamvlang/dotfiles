"""""""""PLUGIN SETTINGS"""""""""
"""Vundle settings"""
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"Set the runtime path to include Vundle and initialize

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdtree'
Plugin 'lervag/vimtex'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Lokaltog/powerline'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'majutsushi/tagbar'
Plugin 'altercation/vim-colors-solarized'
Plugin 'osyo-manga/vim-anzu'
Plugin 'phleet/vim-mercenary'
Plugin 'Valloric/YouCompleteMe'

call vundle#end()
set nocompatible 

"""Syntastic settings"""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"Enable stdc++11
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++11'

"""Vimtex settings"""
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf='pdflatex --interaction=nonstopmode $*'

"""snipMate"""
let g:snippets_dir='~/.vim/bundle/snipMate/snippets/'

"""Powerline setup"""
set laststatus=2 "Always show the statusline
set enc=utf-8 "Nessesary for Unicode glyphs
let g:airline_theme='wombat'
let g:airline_powerline_fonts = 0

"""Tagbar"""
nnoremap <F8> :TagbarToggle<CR>
let g:tagbar_width = 35

"""NERDTree"""
map <F6> :NERDTreeToggle<CR>

"""Anzu"""
set statusline=%{anzu#search_status()}
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star-with-echo)
nmap # <Plug>(anzu-sharp-with-echo)

"""""""""GENERAL SETTINGS"""""""""
"Syntax highlighing on
syntax enable
"This will load the specific filetype's indent file
filetype indent on
filetype plugin on

"Font and font size
set linespace=2
"Colors
se t_Co=16
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
"Word wrapping
set wrap linebreak nolist
"Backspace to work like normal
set backspace=2
"Relative linenumbering
set relativenumber
set nu
"Current path working path
set path=$PWD/**
"Clipboard to work cross documents
set clipboard=unnamed
"Errorbells, both sound and visual
set noerrorbells visualbell t_vb=
"Tab intendation
set shiftwidth=2
set softtabstop=2
set expandtab
"Folding
set foldmethod=manual

"""""Key bindings"""""
map <F7> :set ft=rave <CR>
"""""""""LANGUAGE SPECIFIC"""""""""

"""Pyton"""
"Run script with <F5> in new window
nnoremap <silent> <F5> :!clear;python %<CR>

"""""""""AUTO COMMANDS"""""""""
if has('autocmd')
    """""GENERAL"""""
    "Disabling error bells
    autocmd GUIEnter * set visualbell t_vb=
    "Automatic views
    autocmd BufWinLeave *.* mkview
    autocmd BufWinEnter *.* silent loadview
    """""Python"""""
    autocmd BufRead,BufNewFile *.py setlocal shiftwidth=4 softtabstop=4
   
    """""LaTeX""""" 
    "Setting text width for latex
    autocmd BufRead,BufNewFile *.tex setlocal textwidth=90
    "Setting spelling to Eng US
    autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en_us
    "Setting filetpe to LaTeX
    autocmd BufRead,BufNewFile *.tex setlocal ft=tex

    """""MATLAB"""""
    autocmd BufRead,BufNewFile *.m setlocal ft=matlab 
    autocmd FileType matlab setl cms=%\ %s

    """""NERDTree"""""
    autocmd VimEnter * NERDTree | wincmd p
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | wincmd p | endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
endif
